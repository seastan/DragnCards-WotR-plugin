{
    "actionLists": {
        "setupCoreTrilogy": [
            ["DEFINE", "$PLAYER_N", "player1"],
            ["LOAD_RULES", "Core"],
            ["SET_NUM_PLAYERS", 4],
            ["SET_PLAYER_NAMES", ["LIST", "Frodo", "The Witch-king", "Aragorn", "Saruman"]],
            ["SET_TURN_ORDER", ["LIST", 1, 2, 3, 4]],
            ["SET_SETUP_DRAW", ["LIST", 7, 7, 7, 7]],
            ["SET_ROUND_DRAW", ["LIST", 3, 4, 3, 4]],
            ["SET_SETUP_RINGS", ["LIST", 1, 1, 1, 1]],
            ["SET_ROUND_RINGS", ["LIST", 0, 0, 0, 0]],
            ["SET_NO_POINTS_AWARDED_ON_PATH_TIES", false],
            ["SET_CORRUPTION_BONUS", 0],
            ["SET_SKIRMISHES", false],
            ["LOAD_PROMOS", ["LIST", "43bd748d-d81c-4d98-8440-6c5dfcb75a54", "e9762403-b5d0-4ff8-97b6-347defc8b8e6", "b9539977-4ed1-44c6-aa09-5431a4a11967", "584da922-12a5-44a8-b47f-bd280374d3ba"]],
            ["SET_INITIAL_CORRUPTION", 0],
            ["LOAD_CARDS", "Core-Paths"],
            ["LOAD_CARDS", "Core-Battlegrounds"],
            ["SHUFFLE_BATTLEGROUNDS", true],
            ["SHUFFLE_PATHS", true],
            ["LOAD_PLAYER_DECKS", ["LIST", "Core-Hobbit", "Core-Sauron", "Core-Aragorn", "Core-Isengard"]],
            ["DRAW_STARTING_HANDS"],
            ["SET", "/automationEnabled", true]
        ],
        "setupAtSTrilogy": [
            ["DEFINE", "$PLAYER_N", "player1"],
            ["LOAD_RULES", "AtS"],
            ["SET_NUM_PLAYERS", 4],
            ["SET_PLAYER_NAMES", ["LIST", "Frodo", "The Witch-king", "Aragorn", "Saruman"]],
            ["SET_TURN_ORDER", ["LIST", 1, 2, 3, 4]],
            ["SET_SETUP_DRAW", ["LIST", 7, 7, 7, 7]],
            ["SET_ROUND_DRAW", ["LIST", 3, 4, 3, 4]],
            ["SET_SETUP_RINGS", ["LIST", 1, 0, 1, 0]],
            ["SET_ROUND_RINGS", ["LIST", 0, 0, 0, 0]],
            ["SET_NO_POINTS_AWARDED_ON_PATH_TIES", false],
            ["SET_CORRUPTION_BONUS", 0],
            ["SET_SKIRMISHES", false],
            ["LOAD_PROMOS", ["LIST", "43bd748d-d81c-4d98-8440-6c5dfcb75a54", "e9762403-b5d0-4ff8-97b6-347defc8b8e6", "b9539977-4ed1-44c6-aa09-5431a4a11967", "584da922-12a5-44a8-b47f-bd280374d3ba"]],
            ["SET_INITIAL_CORRUPTION", 0],
            ["LOAD_CARDS", "Core-Paths"],
            ["LOAD_CARDS", "Core-Battlegrounds"],
            ["SHUFFLE_BATTLEGROUNDS", true],
            ["SHUFFLE_PATHS", true],
            ["LOAD_PLAYER_DECKS", ["LIST", "Core-Hobbit", "Core-Sauron", "Core-Aragorn", "Core-Isengard"]],
            ["DRAW_STARTING_HANDS"],
            ["SET_LAYOUT", "shared", "allHandsVisible"],
            ["SET", "/automationEnabled", true]
        ],
        "setupCoreTwoPlayerDuel": [
            ["DEFINE", "$PLAYER_N", "player1"],
            ["LOAD_RULES", "Core"],
            ["SET_NUM_PLAYERS", 2],
            ["SET_PLAYER_NAMES", ["LIST", "Gandalf", "The Witch-king"]],
            ["SET_TURN_ORDER", ["LIST", 1, 2]],
            ["SET_SETUP_DRAW", ["LIST", 4, 6]],
            ["SET_ROUND_DRAW", ["LIST", 4, 6]],
            ["SET_SETUP_RINGS", ["LIST", 1, 1]],
            ["SET_ROUND_RINGS", ["LIST", 1, 1]],
            ["SET_NO_POINTS_AWARDED_ON_PATH_TIES", false],
            ["SET_CORRUPTION_BONUS", 0],
            ["SET_SKIRMISHES", false],
            ["LOAD_PROMOS", ["LIST", "43bd748d-d81c-4d98-8440-6c5dfcb75a54", "e9762403-b5d0-4ff8-97b6-347defc8b8e6", "b9539977-4ed1-44c6-aa09-5431a4a11967", "584da922-12a5-44a8-b47f-bd280374d3ba"]],
            ["SET_INITIAL_CORRUPTION", 0],
            ["LOAD_CARDS", "Core-Paths"],
            ["LOAD_CARDS", "Core-Battlegrounds"],
            ["SHUFFLE_BATTLEGROUNDS", true],
            ["SHUFFLE_PATHS", true],
            ["LOAD_PLAYER_DECKS", ["LIST", "Core-Hobbit", "Core-Sauron", "Core-Aragorn", "Core-Isengard"]],
            ["DRAW_STARTING_HANDS"],
            ["SET", "/automationEnabled", true]
        ],
        "newRound": [
            ["VAR", "$ADDITIONAL_CARDS", 0],
            ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID", 
                [
                    ["COND",
                        ["EQUAL", "$CARD.groupId", ["JOIN_STRING", "$PLAYER_N", "Reserve"]],
                        ["SET", "/cardById/$CARD_ID/rotation", 0]
                    ],
                    ["COND",
                        ["AND",
                            ["EQUAL", "$CARD.groupId", ["JOIN_STRING", "$PLAYER_N", "Reserve"]],
                            ["IN_STRING", "$CARD.sides.A.text", "draw 1 additional card each Draw step"]
                        ],
                        ["UPDATE_VAR", "$ADDITIONAL_CARDS", ["ADD", "$ADDITIONAL_CARDS", 1]]
                    ]
                ]
            ],
            ["LOG", "$ALIAS_N", " performed their draw step."],
            ["DRAW_CARD", "$GAME.playerData.$PLAYER_N.roundDraw"],
            ["COND",
                ["GREATER_THAN", "$ADDITIONAL_CARDS", 0],
                [
                    ["LOG", "└── {{$ALIAS_N}} drew {{$ADDITIONAL_CARDS}} additional card(s)."],
                    ["DRAW_CARD", "$ADDITIONAL_CARDS"]
                ]
            ],
            ["COND",
                ["LESS_THAN", "$GAME.playerData.$PLAYER_N.ringTokens", "$GAME.playerData.$PLAYER_N.roundRings"],
                [
                    ["LOG", "$ALIAS_N", " reset their ring tokens."],
                    ["SET", "/playerData/$PLAYER_N/ringTokens", "$GAME.playerData.$PLAYER_N.roundRings"]
                ]
            ],
            ["COND",
                ["EQUAL", "$PLAYER_N", "player1"],
                [

                    ["COND", 
                        ["AND", ["EQUAL", "$GAME.numPlayers", 3], ["EQUAL", "$GAME.firstPlayer", "player2"]],
                        [
                            ["SET", "/firstPlayer", "player1"],
                            ["SET", "/prevFirstPlayer", "player2"]
                        ],
                        ["AND", ["EQUAL", "$GAME.numPlayers", 3], ["EQUAL", "$GAME.firstPlayer", "player1"], ["EQUAL", "$GAME.prevFirstPlayer", "player2"]],
                        [
                            ["SET", "/firstPlayer", "player3"],
                            ["SET", "/prevFirstPlayer", "player1"]
                        ],
                        true,
                        [
                            ["SET", "/prevFirstPlayer", "$GAME.firstPlayer"],
                            ["SET", "/firstPlayer", ["NEXT_PLAYER", "$GAME.firstPlayer"]]
                        ]
                    ],
                    ["INCREASE_VAL", "/roundNumber", 1],
                    ["LOG", "$ALIAS_N", " moved the first player token and increased the round number."]
                ]
            ]
        ],
        "pass": [
            ["LOG", "$ALIAS_N", " passes."],
            ["COND", 
                ["AND", ["EQUAL", "$GAME.numPlayers", 3], ["EQUAL", "$GAME.currentPlayer", "player2"]],
                [
                    ["SET", "/currentPlayer", "player1"],
                    ["SET", "/prevCurrentPlayer", "player2"]
                ],
                ["AND", ["EQUAL", "$GAME.numPlayers", 3], ["EQUAL", "$GAME.currentPlayer", "player1"], ["EQUAL", "$GAME.prevCurrentPlayer", "player2"]],
                [
                    ["SET", "/currentPlayer", "player3"],
                    ["SET", "/prevCurrentPlayer", "player1"]
                ],
                true,
                [
                    ["SET", "/prevCurrentPlayer", "$GAME.currentPlayer"],
                    ["SET", "/currentPlayer", ["NEXT_PLAYER", "$GAME.currentPlayer"]]
                ]
            ]
        ],
        "drawCard": [
            ["LOG", "{{$ALIAS_N}} drew a card."],
            ["DRAW_CARD"]
        ],
        "zeroTokens": [
            ["SET", "$ACTIVE_TOKENS_PATH", {}],
            ["LOG", "$ALIAS_N", " removed all tokens from ", "$ACTIVE_FACE.name", "."]
        ],
        "toggleRotate": [
            ["COND",
                ["AND", ["EQUAL", "$ACTIVE_CARD.rotation", 90], "$ACTIVE_CARD.inPlay"],
                [
                    ["LOG", "$ALIAS_N", " rotated ", "$ACTIVE_FACE.name", "."],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/rotation", 0]
                ],
                ["AND", ["EQUAL", "$ACTIVE_CARD.rotation", 0], "$ACTIVE_CARD.inPlay"],
                [
                    ["LOG", "$ALIAS_N", " rotated ", "$ACTIVE_FACE.name", "."],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/rotation", 90]
                ]
            ]
        ],
        "flipCard": [
            ["COND",
            ["EQUAL", "$ACTIVE_CARD.currentSide", "A"],
            [
                ["LOG", "$ALIAS_N", " flipped ", "$ACTIVE_FACE.name", " facedown."],
                ["SET", "/cardById/$ACTIVE_CARD_ID/currentSide", "B"]
            ],
            true,
            [
                ["SET", "/cardById/$ACTIVE_CARD_ID/currentSide", "A"],
                ["LOG", "$ALIAS_N", " flipped ", "$ACTIVE_FACE.name", " faceup."]
            ]
            ]
        ],
        "cycleCard": [
            ["COND",
                ["EQUAL", "$ACTIVE_CARD.cycleGroupId", null],
                ["LOG", "$ALIAS_N", " failed to cycle ", "$ACTIVE_FACE.name", " because it is not associated with a cycle pile. Please drag the card instead."],
                true,
                [
                    ["LOG", "$ALIAS_N", " cycled ", "$ACTIVE_FACE.name", "."],
                    ["MOVE_CARD", "$ACTIVE_CARD_ID", "$ACTIVE_CARD.cycleGroupId", 0, 0]
                ]
            ]
        ],
        "cycleDeck": ["CYCLE_DECK", "$PLAYER_N"],
        "eliminateCard": [
            ["COND",
            ["EQUAL", "$ACTIVE_CARD.eliminateGroupId", null],
            ["LOG", "$ALIAS_N", " failed to eliminate ", "$ACTIVE_FACE.name", " because it is not associated with an eliminated pile. Please drag the card instead."],
            true,
            [
                ["LOG", "$ALIAS_N", " eliminated ", "$ACTIVE_FACE.name", "."],
                ["MOVE_CARD", "$ACTIVE_CARD_ID", "$ACTIVE_CARD.eliminateGroupId", 0, 0]
            ]
            ]
        ],
        "detach": [
            ["COND",
            ["GREATER_THAN", "$ACTIVE_CARD.cardIndex", 0],
            [
                ["MOVE_CARD", "$ACTIVE_CARD_ID", "$ACTIVE_CARD.groupId", ["ADD", "$ACTIVE_CARD.stackIndex", 1], 0],
                ["LOG", "$ALIAS_N", " detached ", "$ACTIVE_FACE.name", "."]
            ]
            ]
        ],
        "togglePeeking": [
            ["DEFINE", "$GROUP_ID", "$ACTIVE_CARD.groupId"],
            ["DEFINE", "$GROUP_NAME", ["$GAME.groupById.$GROUP_ID.name"]],
            ["COND",
            ["EQUAL", "$ACTIVE_CARD.peeking.$PLAYER_N", true],
            [
                ["LOG", "$ALIAS_N", " stopped peeking at a card in ", "$GROUP_NAME"],
                ["SET", "/cardById/$ACTIVE_CARD_ID/peeking/$PLAYER_N", false]
            ],
            true,
            [
                ["LOG", "$ALIAS_N", " started peeking at a card in ", "$GROUP_NAME"],
                ["SET", "/cardById/$ACTIVE_CARD_ID/peeking/$PLAYER_N", true]
            ]
            ]
        ],
        "shuffleGroupIntoDeck": [
            ["DEFINE", "$ORIG_GROUP", "$GAME.playerUi.dropdownMenu.group"],
            ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID",
            ["COND", 
                ["AND",
                ["EQUAL", "$CARD.groupId", "$GAME.playerUi.dropdownMenu.group.id"],
                ["NOT_EQUAL", "$CARD.deckGroupId", null]
                ],
                [
                ["MOVE_CARD", "$CARD_ID", "$CARD.deckGroupId", 0, 0],
                ["SHUFFLE_GROUP", "$CARD.deckGroupId"]
                ]
            ]
            ],
            ["LOG", "$ALIAS_N", " shuffled the cards in ", "$ORIG_GROUP.name", " into their corresponding decks."]
        ],
        "printPileSizes": [
            ["LOG", "Printing pile sizes:"],
            ["FOR_EACH_KEY_VAL", "$PLAYER_I", "$PLAYER_DATA", "$GAME.playerData", [
                ["VAR", "$DECK_LENGTH", ["LENGTH", "$GAME.groupById.{{$PLAYER_I}}Deck.stackIds"]],
                ["VAR", "$CYCLE_LENGTH", ["LENGTH", "$GAME.groupById.{{$PLAYER_I}}Cycled.stackIds"]],
                ["VAR", "$ELIM_LENGTH", ["LENGTH", "$GAME.groupById.{{$PLAYER_I}}Eliminated.stackIds"]],
                ["LOG", "├── {{$PLAYER_DATA.label}} Deck/Cycle/Elim: {{$DECK_LENGTH}}/{{$CYCLE_LENGTH}}/{{$ELIM_LENGTH}}"]
            ]]
        ],
        "deleteCard": [
            ["LOG", "$ALIAS_N", " deleted ", "$ACTIVE_FACE.name", "."],
            ["DELETE", "$ACTIVE_CARD_ID"]
        ],
        "increaseCorruption": [
            ["LOG", "$ALIAS_N", " increased the corruption counter."],
            ["INCREASE_VAL", "/corruptionScore", 1],
            ["COMPUTE_SCORE"]
        ],

        "decreaseCorruption": [
            ["LOG", "$ALIAS_N", " decreased the corruption counter."],
            ["DECREASE_VAL", "/corruptionScore", 1],
            ["COMPUTE_SCORE"]
        ],
        "scoreLocation": [
            ["COND", 
                ["IN_STRING", "$ACTIVE_GROUP_ID", "sharedActiveLocation"],
                [
                    ["VAR", "$BLUE_GROUP_ID", "$ACTIVE_GROUP.activeBlueGroupId"],
                    ["VAR", "$RED_GROUP_ID", "$ACTIVE_GROUP.activeRedGroupId"],
                    ["VAR", "$BLUE_TOTAL", "$GAME.textBoxById.$BLUE_GROUP_ID.content"],
                    ["VAR", "$RED_TOTAL", "$GAME.textBoxById.$RED_GROUP_ID.content"],
                    ["COND",
                        ["GREATER_THAN", "$BLUE_TOTAL", "$RED_TOTAL"],
                        [
                            ["LOG", "$ALIAS_N", " scored ", "$ACTIVE_FACE.name", " for the Free Peoples Player(s) team."],
                            ["MOVE_CARD", "$ACTIVE_CARD_ID", "sharedScoringBlue", 0]
                        ],
                        ["GREATER_THAN", "$RED_TOTAL", "$BLUE_TOTAL"],
                        [
                            ["LOG", "$ALIAS_N", " scored ", "$ACTIVE_FACE.name", " for the Shadow Player(s) team."],
                            ["MOVE_CARD", "$ACTIVE_CARD_ID", "sharedScoringRed", 0],
                            ["COND", 
                                ["EQUAL", "$ACTIVE_FACE.type", "Path"],
                                [
                                    ["LOG", "$ALIAS_N", " flipped ", "$ACTIVE_FACE.name", " facedown."],
                                    ["SET", "/cardById/$ACTIVE_CARD_ID/currentSide", "B"],
                                    ["LOG", "$ALIAS_N", " increased the corruption score by ", ["SUBTRACT", "$RED_TOTAL", "$BLUE_TOTAL"], "."],
                                    ["INCREASE_VAL", "/corruptionScore", ["SUBTRACT", "$RED_TOTAL", "$BLUE_TOTAL"]]
                                ],
                                ["EQUAL", "$ACTIVE_FACE.type", "Battleground"],
                                ["RESOLVE_CORRUPTION_BONUS"]
                            ]
                        ],
                        ["AND",
                            "$GAME.noPointsAwardedOnPathTies",
                            ["EQUAL", "$GAME.groupById.$BLUE_GROUP_ID.combatStat", "buckler"]
                        ],
                        [
                            ["LOG", "$ALIAS_N", " scored ", "$ACTIVE_FACE.name", " for neither team."],
                            ["MOVE_CARD", "$ACTIVE_CARD_ID", "sharedAside", 0]
                        ],
                        ["OR",
                            ["EQUAL", "$GAME.groupById.$BLUE_GROUP_ID.combatStat", "defense"],
                            ["EQUAL", "$GAME.groupById.$BLUE_GROUP_ID.combatStat", "buckler"]
                        ],
                        [
                            ["LOG", "$ALIAS_N", " scored ", "$ACTIVE_FACE.name", " for the Free Peoples Player(s) team."],
                            ["MOVE_CARD", "$ACTIVE_CARD_ID", "sharedScoringBlue", 0]
                        ],
                        ["EQUAL", "$GAME.groupById.$RED_GROUP_ID.combatStat", "defense"],
                        [
                            ["LOG", "$ALIAS_N", " scored ", "$ACTIVE_FACE.name", " for the Shadow Player(s) team."],
                            ["MOVE_CARD", "$ACTIVE_CARD_ID", "sharedScoringRed", 0]
                        ]
                    ]
                ],
                ["TRUE"],
                ["LOG", "$ALIAS_N", " attempted to score an invalid card."]
                    
            ]
        ],
        "getHandFromSetAsideHand": [
            ["LOG", "{{$PLAYER_N}} moved the cards in Set-Aside Hand to their hand."],
            ["MOVE_STACKS", "sharedSetAsideHand", "{{$PLAYER_N}}Hand"]
        ],
        "cycleSetAsidePiles": [
            ["LOG", "{{$PLAYER_N}} cycled the cards in id:setAsidePile1"],
            ["MOVE_STACKS", "sharedSetAsidePile1", "{{$PLAYER_N}}Cycled"],
            ["LOG", "{{$PLAYER_N}} cycled the cards in id:setAsidePile2"],
            ["MOVE_STACKS", "sharedSetAsidePile2", "{{$PLAYER_N}}Cycled"]
        ],
        "postSetLayout": [
            ["SET_NUM_BLUE_RED", "$GAME.numBlue", "$GAME.numRed"],
            ["HIGHLIGHT_CURRENT_PLAYER"]
        ],
        "changeP4ToP3": [
            ["UPDATE_LAYOUT", "/layout/regions/player4Reserve/groupId", "player3Reserve"],
            ["UPDATE_LAYOUT", "/layout/regions/player4Hand/groupId", "player3Hand"],
            ["UPDATE_LAYOUT", "/layout/regions/player4Deck/groupId", "player3Deck"],
            ["UPDATE_LAYOUT", "/layout/regions/player4Cycled/groupId", "player3Cycled"],
            ["UPDATE_LAYOUT", "/layout/regions/player4Eliminated/groupId", "player3Eliminated"]
        ]
    }
}
